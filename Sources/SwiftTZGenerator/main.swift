import Foundation

struct TZDBGenerator {
    static func findPklPath() throws -> String {
        let possiblePaths = [
            "/opt/homebrew/bin/pkl",     // Apple Silicon Homebrew
            "/usr/local/bin/pkl",        // Intel Homebrew
            "/usr/bin/pkl"               // System install
        ]
        
        for path in possiblePaths {
            if FileManager.default.fileExists(atPath: path) {
                return path
            }
        }
        
        throw GeneratorError.pklNotFound
    }

    // Helper function to convert timezone name to camelCase
    static func toCamelCase(_ name: String) -> String {
        // Split by "/" and "_"
        let components = name.components(separatedBy: CharacterSet(charactersIn: "/_"))
        
        // Convert to camelCase
        return components.enumerated().map { index, component in
            let lowercased = component.lowercased().replacingOccurrences(of: "/", with: "")
                .replacingOccurrences(of: "_", with: "_")
                .replacingOccurrences(of: "-", with: "")
            // First component starts with lowercase, rest with uppercase
            return index == 0 ? lowercased : lowercased.prefix(1).uppercased() + lowercased.dropFirst()
        }.joined()
    }
    
    static func generateTimeZoneId(from jsonPath: String) throws {
        print("üåç Generating TimeZoneId enum...")
        
        // Read the JSON file
        let fileURL = URL(fileURLWithPath: jsonPath)
        print("üìñ Reading from: \(fileURL.path)")
        
        let content = try String(contentsOf: fileURL, encoding: .utf8)
        let json = try JSONDecoder().decode(TimeZoneData.self, from: content.data(using: .utf8)!)
        
        print("‚úì Found \(json.timezone.count) timezones")
        
        // Generate the TimeZoneId enum code
        let cases = json.timezone.map { timezone in
            let name = toCamelCase(timezone.name)      
            return """
                /// \(timezone.type == "now" ? "Current timezone from zonenow.tab" : "Historical timezone from zone1970.tab")
                case \(name) = "\(timezone.name)"
            """
        }
        
        let sourceCases = json.timezone.map { timezone in
            let name = toCamelCase(timezone.name)          
            return "case .\(name): return .\(timezone.type)"
        }
        
        // Generate the full enum code
        let enumCode = """
        // Generated by SwiftTZGenerator. Do not edit.
        
        import Foundation
        
        /// Time zone identifiers from IANA Time Zone Database
        public enum TimeZoneIdentifier: String, CaseIterable, Hashable {
            /// The source type of the timezone
            public enum Source: String {
                /// From zonenow.tab - currently active timezones
                case now
                /// From zone1970.tab - historical timezones since 1970
                case zone1970
            }
            
            \(cases.joined(separator: "\n        "))
            
            /// Returns whether this timezone is from zonenow.tab or zone1970.tab
            public var source: Source {
                switch self {
                    \(sourceCases.joined(separator: "\n                "))
                }
            }
        }
        """
        
        // Create the output directory if it doesn't exist
        let outputPath = "Sources/SwiftTZ/TimeZoneIdentifier.swift"
        try FileManager.default.createDirectory(
            atPath: "Sources/SwiftTZ/",
            withIntermediateDirectories: true
        )
        
        // Write the generated code
        print("üíæ Writing to: \(outputPath)")
        try enumCode.write(
            toFile: outputPath,
            atomically: true,
            encoding: .utf8
        )
        
        // Print some statistics
        let nowZones = json.timezone.filter { $0.type == "now" }.count
        let zone1970Zones = json.timezone.filter { $0.type == "zone1970" }.count
        
        print("\nStatistics:")
        print("- Total timezones: \(json.timezone.count)")
        print("- Current (now) timezones: \(nowZones)")
        print("- Historical (zone1970) timezones: \(zone1970Zones)")
        
        // Delete the JSON file
        try FileManager.default.removeItem(atPath: jsonPath)
    }
    
    static func main() async throws {
        let parser = TZDBParser()
        
        // Parse both zone files
        let nowZones = try parser.parseTimeZones(type: .now)
        let zone1970Zones = try parser.parseTimeZones(type: .zone1970)
        
        // Combine and deduplicate zones
        let allZones = Array(Set(nowZones + zone1970Zones))
        
        // Generate PKL schema
        let generator = PKLGenerator()
        let schema = try generator.generateSchema(from: allZones)
        
        // Write PKL file
        let pklPath = "Sources/pkl/data1970now.pkl"
        try schema.write(
            to: URL(fileURLWithPath: pklPath),
            atomically: true,
            encoding: String.Encoding.utf8
        )
        
        // Find pkl executable
        let pklExecutable = try findPklPath()

        // Generate JSON using pkl eval
        let process = Process()
        process.currentDirectoryPath = FileManager.default.currentDirectoryPath
        process.executableURL = URL(fileURLWithPath: pklExecutable)
        process.arguments = [
            "eval",
            "-f", "json",
            pklPath,
            "-o", "Sources/SwiftTZ/Generated/data1970now.json"
        ]

        let pipe = Pipe()
        process.standardError = pipe
        
        try process.run()
        process.waitUntilExit()

        if process.terminationStatus != 0 {
            let data = try pipe.fileHandleForReading.readToEnd() ?? Data()
            if let error = String(data: data, encoding: .utf8) {
                throw GeneratorError.pklEvalFailed(error)
            }
        }

        print("‚úÖ Generated PKL schema and JSON data")
        
        // Generate TimeZoneId enum from the JSON
        try generateTimeZoneId(from: "Sources/SwiftTZ/Generated/data1970now.json")
    }
}

// JSON structure matching data1970now.json
private struct TimeZoneData: Codable {
    struct TimeZone: Codable {
        let name: String
        let type: String
    }
    let timezone: [TimeZone]
}

enum GeneratorError: Error, CustomStringConvertible {
    case pklEvalFailed(String)
    case pklNotFound
    
    var description: String {
        switch self {
        case .pklEvalFailed(let error):
            return "PKL evaluation failed: \(error)"
        case .pklNotFound:
            return "Could not find pkl executable. Please ensure pkl is installed via Homebrew."
        }
    }
}

// Entry point
try await TZDBGenerator.main()